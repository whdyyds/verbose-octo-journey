类是一种数据类型；对象是一个具体的实例
从类到对象：创建对象/实例化对象/把类实例化
类是概念的、抽象的，代表一类事物
对象是具体的、实际的，代表一个具体事物
类是对象的模板，对象是类的一个个体，对应一个实例
在内存中的存在形式：类（栈，地址指向堆） 对象（堆，字符串类型的对象地址指向方法区）
属性：成员变量/field字段
属性是类的一个组成部分，一般是基本数据类型，也可以是引用数据类型
属性细节：1）属性的定义语法同变量：访问修饰符（控制属性的访问范围）：public、protected、默认、private
         2）属性的定义类型可以为任意类型        
         3）属性如果不赋值，有默认值，规则和数组一致
创建对象：1）先声明再创建：Cat cat; cat = new Cat();
         2）直接创建：Cat cat = new Cat()
类与对象的内存分配机制：java内存的结构分析：
        1）栈：一般存放基本数据类型（局部变量）
        2）堆：存放对象
        3）方法区：常量池、类加载信息
        创建对象的流程：
        1）加载类信息（属性和方法信息，只加载一次）
        2）在堆中分配空间，进行默认初始化
        3）地址指向对象
        4）进行指定初始化
成员方法：先创建对象，再调用方法，方法不调用就不会生效  对象名.方法名(参数)
方法调用：1）当程序执行到方法时，就会开辟一个独立的栈空间
         2）当方法执行完毕，或者执行完return语句后就会返回   定义接收变量=对象名.方法名(参数)
         3）返回到调用方法的地方
         4）返回后继续执行后面的代码
         5）main方法执行完毕后，整个程序退出
方法使用细节：访问修饰符：控制方法使用的范围，如果不写就是默认访问
             返回类型：1）一个方法最多有一个返回值，如果要返回多个结果，使用数组
                      2）返回类型可以为任意类型
                      3）如果有返回要求，则最后的执行语句必须为return，返回值类型必须与return的值类型一致或兼容
                      4）如果方法为void，则可以不写return语句，或只写一个return
             方法名：驼峰命名法
             参数列表：1）一个方法可以有0个参数，也可以有多个参数，中间用，隔开
                      2）参数类型可以为任意类型，包括基本类型和引用类型
                      3）调用带参数的方法时，一定对应着参数列表传入相同类型或兼容类型的参数
                      4）形参：方法定义时的参数
                         实参：方法调用时的传入参数
             方法体：方法不能嵌套定义
             方法调用细节：1）同一个类中的方法直接调用，不需要创建对象
                          2）跨类的方法调用需创建对象名
                          3）跨类方法调用与方法的访问修饰符有关
成员方法传参机制：基本数据类型进行的是值传递，形参的任何变化不影响实参
                引用数据类型的传参机制：传递的是地址，形参可以影响实参
方法递归调用：递归就是方法自己调用自己，每次调用时传入不同的变量。
递归重要规则：1）执行一个方法时就创建一个新的受保护的独立空间（栈空间）
             2）方法的局部变量是独立的，不会相互影响
             3）如果方法中使用的是引用类型变量（比如数组），就会共享该引用类型的数据
             4）递归必须向退出递归的方向逼近
             5）当一个方法执行完毕，或者遇到return就会返回，遵守谁调用就将结果返回给谁，同时当方法执行完毕或返回时，该方法也就执行完毕
方法重载：java允许同一个类中，多个同名方法的存在，但要求形参列表不一致
         方法名相同，参数列表不同（形参个数或顺序），返回类型无要求
可变参数使用：java允许将同一个类中多个同名同功能但参数个数不同的方法封装成一个方法  int... nums
            使用可变参数时可以当做数组来使用
            1）可变参数的实参可以是0个或任意多个
            2）可变参数的实参可以为数组
            3）可变参数的本质就是数组
            4）可变参数可以和普通类型的参数一起放在形参列表，但要保证可变参数在最后
            5）一个形参列表中只能出现一个可变参数
变量作用域：1）java中，主要的变量就是属性（成员变量）和局部变量
           2）局部变量一般指在成员方法中定义的变量；成员变量指定义在类内方法外的变量
           3）作用域的分类：全局变量作用域为整个类体；局部变量的作用域在定义的代码块中
           4）全局变量（属性）可以不赋值直接使用，有默认值；局部变量必须赋值后才能使用
作用域使用细节：1）局部变量和属性可以重名，访问时遵循就近原则
              2）同一个作用域中，两个局部变量不能重名
              3）属性伴随对象，局部变量伴随代码块
              4）作用域范围不同：全局变量可以被本类和其他类使用，局部变量只能在本类对应的方法使用
              5）修饰符不同：全局变量（属性）可以加修饰符，局部变量不可以加修饰符
构造器：是类的一种特殊方法，主要作用是完成新对象的初始化        [修饰符] 方法名（形参列表）{方法体}
        1）构造器的修饰符可以默认
        2）构造器没有返回值
        3）方法名（构造器名）和类名一定要一致
        4）参数列表和成员方法一样的规则
        5）构造器的调用由系统完成，在创建对象时，系统会自动调用该类的构造器完成对象初始化
        6）一个类可以定义多个不同的构造器，即构造器重载
        7）如果没有定义构造器，系统会自动给类生成一个默认无参构造器     构造器名（）{}
        8）一旦定义了构造器，默认的构造器就被覆盖，不能再使用，除非再显式定义
javap反编译：javap Person.class/javap Person
对象创建流程：1）方法区中加载类信息
             2）分配空间地址
             3）完成对象初始化：默认初始化、显式初始化、构造器初始化
             4）将对象在堆中的地址返回
this关键字：this.name表示当前对象的属性name     对象名.hashCode()表示地址
           哪个对象调用，this就代表哪个对象
           1）this关键字可以用来访问本类的属性、方法、构造器
           2）this可以用来区分当前类的属性和局部变量
           3）访问成员方法：this.方法名（参数列表）
           4）访问构造器：this（参数列表），只能在构造器中访问另一个构造器，且访问语句必须在第一行
           5）this不能在类定义的外部使用，只能在类定义的方法中使用