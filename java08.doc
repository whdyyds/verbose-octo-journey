包的作用：1）区分相同名字的类
         2）管理类
         3）控制访问范围
包基本语法：package com.包名
包的本质：实际上就是创建不同的文件夹来保存类
包的命名：1）规则：只能包含数字、字母、下划线和.    不能用数字开头，不能是关键字和保留字
         2）规范：com.公司名.项目名.业务模块名
常用的包：1）java.lang.*：基本包，默认引入，不需要再引入
         2）java.util.*：系统提供的工具包，工具类，使用Scanner
         3）java.net.*：网络包，网络开发
         4）java.awt.*：界面开发
包的使用细节：1）import java.util.Scanner;//引入util包下的Scanner类
                import java.util.*;//引入util包下的所有类
                需要使用哪个类就引用哪个类
             2）package的作用是声明当前类所在的包，需要放在类的最上面，一个类中最多有一句package
             3）import指令放在package下面，在类定义前面，可以有多句且无顺序要求，作用是引用类
访问修饰符：1）public：公开级别，对外公开
           2）protected：受保护级别，对子类和同一个包中的类公开
           3）默认：默认级别，向同一个包的类公开
           4）private：私有级别，只有类本身可以访问，不对外公开
           同类     同包    子类    不同包
           1）修饰符可以用来修饰类中的属性、成员方法以及类
           2）只有默认和public才能修饰类
           3）成员方法和属性的访问规则一致
面向对象编程有三大特征：封装、继承、多态
封装：把抽象出的数据（属性）和对数据的操作（方法）封装在一起，数据被保护在内部，程序其他部分只有通过被授权的操作（方法）才能对数据进行操作
    1）隐藏实现细节
    2）可以对数据进行验证，保证安全合理
    步骤：1）将属性私有化private，外部不能直接修改属性
         2）提供一个public的set方法，用于对属性判断并赋值
         3）提供一个public的get方法，用于获取属性的值
    构造器与setXxx结合：将set方法写在构造器中
继承：当多个类存在相同的属性（变量）和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有子类通过extends来声明继承父类
    class 子类 extends 父类{}
    1）子类自动拥有父类定义的属性和方法，私有属性和方法不能在子类直接访问，要通过父类提供的公共方法去访问
    2）子类默认会先调用父类的构造器，完成父类的初始化
    3）创建子类对象时，不管使用子类的哪个构造器。默认情况下总会去调用父类的无参构造器，如果父类没有提供，则必须在子类构造器中用super指定用父类的哪个构造器
    4）如果希望指定调用父类某构造器，则显式调用一下：super(参数列表)
    5）super在使用时必须放在构造器内第一行
    6）super()和this()不能同时存在于一个构造器  super(实参列表)：子类调父类构造器   this(实参列表)：本类间调用构造器
    7）java所有类都是object的子类，object是所有类的基类
    8）父类构造器的调用不局限于直接父类，一直追溯到顶级父类object
    9）子类最多直接继承一个父类
    10）子类和父类之间必须满足逻辑关系
    复用性、扩展性、维护性
    查找关系返回信息：1）首先看子类是否有该属性
                    2）如果子类有该属性并且可以访问，则返回信息
                    3）如果子类没有这个属性，就看父类有没有该属性
                    4）依次向上级父类查找
                    5）private修饰的属性不可访问但是占内存
                    6）如果在父类中找到了属性但是不能访问，即使再上级的类中有可以访问的同名属性，也会报错
super关键字：代表父类的引用，用于访问父类的属性、方法、构造器
            1）访问父类的属性，但不能访问父类的private属性  super.属性名
            2）访问父类的方法，但不能访问父类的private方法  super.方法名(参数列表)
            3）访问父类的构造器
            如果没有重名，super、this和直接访问是一样的效果
            super.方法名()不查找本类，直接从父类开始向上查找，访问遵循就近原则
重写：1）子类有一个方法和父类中的某个方法的名称、参数一致，子类的方法就覆盖了父类的方法
     2）子类方法的返回类型与父类方法的返回类型一致，或者是父类返回类型的子类（object和string）
     3）子类方法不能缩小父类方法的访问权限
多态：1）方法多态：重写和重载体现多态
     2）对象多态：1.一个对象的编译类型和运行类型可以不一致  Animal animal = new Dog(); 编译类型是Animal，运行对象是Dog
                 2.编译类型在定义对象时就确定了，不能改变
                 3.运行类型可以变化     animal = new Cat(); 编译类型仍是Animal，运行对象变为Cat
                 4.编译类型看定义时=的左边，运行类型看=的右边
          多态的前提是：两个对象（类）存在继承关系
          向上转型：父类的引用指向了子类的对象    父类类型 对象名 = new 子类类型();
                   可以调用父类中的所有成员（需遵守访问权限），不能调用子类中特有成员
                   在编译阶段能调用那些成员，由编译类型决定
                   最终运行效果看子类的具体实现，从子类开始查找调用
          向下转型：子类类型 引用名 = （子类类型）父类引用
                   只能强转父类的引用，不能强转父类的对象，要求父类的引用必须指向的是当前目标类型的对象，向下转型后可以调用子类所有成员
                   编译类型和运行类型都看=左边
          属性重写问题：属性没有重写之说，属性的值看编译类型
                      instanceOf：比较操作符，用于判断对象的运行类型是否为XX类型或其子类型
          动态绑定机制： 1）当调用对象方法的时候，该方法会和该对象的内存地址(运行类型)绑定
                       2）当调用对象属性的时候，没有动态绑定机制，哪里声明哪里使用
          多态数组：数组的定义类型为父类类型，里面保存的实际元素可为子类类型
          多态参数：方法定义的形参类型为父类类型，实参类型允许为子类类型
Object类：1.equals方法：1）==既可以判断基本类型，也可以判断引用类型
                       2）==如果判断基本类型，判断的是值是否相等
                       3）==如果判断引用类型，判断的是地址是否相等，即是否为同一对象
                       4）equals只能判断引用类型
                       5）默认判断的是地址是否相等，子类中往往重写该方法，用于判断内容是否相等
          2.hashCode方法：1）提高具有哈希结构的容器的效率
                         2）两个引用如果指向同一个对象，哈希值相同
                         3）两个引用如果指向不同对象，哈希值不同
                         4）哈希值主要根据地址计算，但不等价于地址
          3.toString方法：1）返回字符串表示，默认返回：全类名+@+哈希值的十六进制
                         2）子类重写toString方法，用于返回对象的属性信息
                         3）打印或拼接对象时，都会自动调用该对象的toString形式
                         4）直接输出一个对象时，toString方法会被默认调用   System.out.println(对象名);
          4.finalize方法：1）对象被回收时，系统自动调用该对象的finalize方法，子类可以重写该方法做一些释放资源的操作
                         2）当某个对象没有任何引用时，则jvm就认为这个对象时一个垃圾对象
                         3）垃圾回收机制的调用，由系统决定，也可以通过System.gc()主动出发垃圾回收机制
断点调试：以对象的运行类型来执行
         快捷键：F7（跳入方法内）F8（逐行执行代码）shift+F8（跳出方法）F9（resume，执行到下一个断点）